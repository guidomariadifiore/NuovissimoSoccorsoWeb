openapi: 3.0.3
info:
  title: SoccorsoWeb REST API
  description: |
    API per il sistema di gestione delle richieste di soccorso
    
    Sviluppatori:
    - Guido Maria Di Fiore (guidomaria.difiore@student.univaq.it)
    - Beatrice Pascucci (beatrice.pascucci@student.univaq.it)
    - Erika Baliva (erika.baliva@student.univaq.it)
  version: 1.0.0

servers:
  - url: http://localhost:8080/nuovissimo-soccorso-web-1.0-SNAPSHOT/api/
    description: Server di sviluppo locale
    
tags:
  - name: Autenticazione
    description: Gestione dell'autenticazione degli utenti (login/logout)
  - name: Test
    description: Endpoint di test e verifica sistema (una sorta di debug fatto all'inizio, ignorare)
  - name: Missioni
    description: Gestione delle missioni di soccorso
  - name: Richieste
    description: Gestione e consultazione delle richieste di soccorso
  - name: Richieste Pubbliche
    description: Inserimento e convalida delle richieste di soccorso (endpoint pubblici)



components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: Token JWT ottenuto tramite login

  schemas:
    # === AUTENTICAZIONE ===
    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          description: Email dell'utente (amministratore o operatore)
          example: "guidomariadifiore@gmail.com"
        password:
          type: string
          format: password
          description: Password dell'utente
          example: "Ciao"

    LoginResponse:
      type: object
      properties:
        success:
          type: boolean
          description: Indica se il login è stato effettuato con successo
        message:
          type: string
          description: Messaggio di stato
        token:
          type: string
          description: Token JWT per le richieste autenticate
        user:
          $ref: '#/components/schemas/UserInfo'
      example:
        success: true
        message: "Login effettuato con successo"
        token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        user:
          id: 2
          email: "guidomariadifiore@gmail.com"
          role: "admin"

    LogoutResponse:
      type: object
      properties:
        success:
          type: boolean
          description: Indica se il logout è stato effettuato con successo
        message:
          type: string
          description: Messaggio di conferma
      example:
        success: true
        message: "Logout effettuato con successo"

    VerifyResponse:
      type: object
      properties:
        valid:
          type: boolean
          description: Indica se il token è valido
        message:
          type: string
          description: Messaggio di stato
        user:
          $ref: '#/components/schemas/UserInfo'
      example:
        valid: true
        message: "Token valido"
        user:
          id: 2
          email: "guidomariadifiore@gmail.com"
          role: "Ciao"

    UserInfo:
      type: object
      properties:
        id:
          type: integer
          description: ID univoco dell'utente
        email:
          type: string
          format: email
          description: Email dell'utente
        role:
          type: string
          enum: ["ADMIN", "OPERATORE"]
          description: Ruolo dell'utente nel sistema
      example:
        id: 2
        email: "guidomariadifiore@gmail.com"
        role: "Ciao"

    # === ERRORI ===
    ErrorResponse:
      type: object
      properties:
        success:
          type: boolean
          example: false
        message:
          type: string
          description: Messaggio di errore
        error:
          type: string
          description: Dettagli tecnici dell'errore
          
    # === MISSIONI ===
    MissioneRequest:
      type: object
      required:
        - richiestaId
        - nome
        - posizione
        - obiettivo
      properties:
        richiestaId:
          type: integer
          description: ID della richiesta di soccorso per cui creare la missione
        nome:
          type: string
          description: Nome della missione
        posizione:
          type: string
          description: Posizione dell'intervento
        obiettivo:
          type: string
          description: Obiettivo della missione
        operatori:
          type: string
          description: IDs operatori separati da virgola (per compatibilità)
        caposquadra:
          type: string
          description: IDs caposquadra separati da virgola
        operatoriStandard:
          type: string
          description: IDs operatori standard separati da virgola
        mezzi:
          type: string
          description: Targhe mezzi separate da virgola
        materiali:
          type: string
          description: IDs materiali separati da virgola
      example:
        richiestaId: 15
        nome: "Soccorso alpino Monte Bianco"
        posizione: "Monte Bianco, quota 2500m"
        obiettivo: "Recupero escursionista ferito"
        caposquadra: "1"
        operatoriStandard: "2"
        mezzi: "EP900MH"
        materiali: "1,2"

    MissioneDTO:
      type: object
      properties:
        codiceRichiesta:
          type: integer
          description: ID della richiesta associata
        nome:
          type: string
          description: Nome della missione
        posizione:
          type: string
          description: Posizione dell'intervento
        obiettivo:
          type: string
          description: Obiettivo della missione
        nota:
          type: string
          description: Note aggiuntive
        dataOraInizio:
          type: string
          format: date-time
          description: Data e ora inizio missione
        idAmministratore:
          type: integer
          description: ID dell'amministratore che ha creato la missione
      example:
        codiceRichiesta: 1
        nome: "Soccorso alpino Monte Bianco"
        posizione: "Monte Bianco, quota 2500m"
        obiettivo: "Recupero escursionista ferito"
        nota: ""
        dataOraInizio: "2024-01-15T14:30:00"
        idAmministratore: 1

    MissioneResponse:
      type: object
      properties:
        success:
          type: boolean
        message:
          type: string
        missione:
          $ref: '#/components/schemas/MissioneDTO'
        emailOperatori:
          type: array
          items:
            type: string
            format: email
          description: Email degli operatori assegnati per notifiche
      example:
        success: true
        message: "Missione creata con successo"
        missione:
          codiceRichiesta: 123
          nome: "Soccorso alpino Monte Bianco"
        emailOperatori: ["mario.rossi@soccorso.it", "luigi.verdi@soccorso.it"]

    DettagliMissioneDTO:
      type: object
      properties:
        id:
          type: integer
        nome:
          type: string
        posizione:
          type: string
        obiettivo:
          type: string
        note:
          type: string
        dataOraInizio:
          type: string
          format: date-time
        dataOraFine:
          type: string
          format: date-time
          nullable: true
        idAmministratore:
          type: integer
        richiestaId:
          type: integer
        operatori:
          type: array
          items:
            $ref: '#/components/schemas/OperatoreAssegnatoDTO'
        mezzi:
          type: array
          items:
            $ref: '#/components/schemas/MezzoAssegnatoDTO'
        materiali:
          type: array
          items:
            $ref: '#/components/schemas/MaterialeAssegnatoDTO'
        richiesta:
          $ref: '#/components/schemas/RichiestaDTO'
        valutazione:
          $ref: '#/components/schemas/ValutazioneMissioneDTO'
          nullable: true

    OperatoreAssegnatoDTO:
      type: object
      properties:
        id:
          type: integer
        nome:
          type: string
        cognome:
          type: string
        email:
          type: string
          format: email
        codiceFiscale:
          type: string
        ruolo:
          type: string
          enum: ["Caposquadra", "Standard"]
      example:
        id: 1
        nome: "Mario"
        cognome: "Rossi"
        email: "mario.rossi@soccorso.it"
        ruolo: "Caposquadra"

    MaterialeAssegnatoDTO:
      type: object
      properties:
        id:
          type: integer
        nome:
          type: string
        quantita:
          type: integer
      example:
        id: 1
        nome: "Barella"
        quantita: 2

    MezzoAssegnatoDTO:
      type: object
      properties:
        targa:
          type: string
        tipo:
          type: string
        modello:
          type: string
      example:
        targa: "AB123CD"
        tipo: "Ambulanza"
        modello: "Fiat Ducato"

    ValutazioneMissioneDTO:
      type: object
      properties:
        successo:
          type: integer
          minimum: 1
          maximum: 5
          description: Livello di successo della missione (1-5)
        commento:
          type: string
          description: Commento sulla missione
        dataOraFine:
          type: string
          format: date-time
      example:
        successo: 4
        commento: "Missione completata con successo, paziente salvato"
        dataOraFine: "2024-01-15T18:45:00"

    ChiusuraMissioneRequest:
      type: object
      required:
        - livelloSuccesso
        - commento
      properties:
        livelloSuccesso:
          type: integer
          minimum: 1
          maximum: 5
          description: Livello di successo (1=molto scarso, 5=eccellente)
        commento:
          type: string
          minLength: 1
          description: Commento obbligatorio sulla missione
      example:
        livelloSuccesso: 4
        commento: "Missione completata con successo, paziente trasportato in ospedale"

    ChiusuraMissioneResponse:
      type: object
      properties:
        success:
          type: boolean
        message:
          type: string
        timestampChiusura:
          type: string
          format: date-time
        missioneId:
          type: integer
      example:
        success: true
        message: "Missione chiusa con successo! Livello di successo: 4/5"
        timestampChiusura: "2024-01-15T18:45:00"
        missioneId: 123

    MissioneOperatoreDTO:
      type: object
      properties:
        id:
          type: integer
        nome:
          type: string
        posizione:
          type: string
        obiettivo:
          type: string
        stato:
          type: string
          enum: ["ATTIVA", "CONCLUSA"]
        dataOraInizio:
          type: string
          format: date-time
        dataOraFine:
          type: string
          format: date-time
          nullable: true
        ruoloOperatore:
          type: string
          enum: ["Caposquadra", "Standard"]
        livelloSuccesso:
          type: integer
          minimum: 0
          maximum: 5
        descrizioneRichiesta:
          type: string
        indirizzoIntervento:
          type: string
      example:
        id: 123
        nome: "Soccorso alpino Monte Bianco"
        stato: "CONCLUSA"
        ruoloOperatore: "Caposquadra"
        livelloSuccesso: 4

    MissioniOperatoreResponse:
      type: object
      properties:
        operatoreId:
          type: integer
        nomeOperatore:
          type: string
        emailOperatore:
          type: string
          format: email
        missioni:
          type: array
          items:
            $ref: '#/components/schemas/MissioneOperatoreDTO'
        totaleMissioni:
          type: integer
      example:
        operatoreId: 5
        nomeOperatore: "Mario Rossi"
        emailOperatore: "mario.rossi@soccorso.it"
        totaleMissioni: 12

    RichiestaDTO:
      type: object
      properties:
        codice:
          type: integer
          description: Codice identificativo della richiesta
        stato:
          type: string
          enum: ["In Attesa", "Convalidata", "Attiva", "Chiusa", "Ignorata"]
        indirizzo:
          type: string
        descrizione:
          type: string
        nome:
          type: string
        emailSegnalante:
          type: string
          format: email
        nomeSegnalante:
          type: string
        coordinate:
          type: string
        foto:
          type: string
          description: Base64 encoded image
        stringaValidazione:
          type: string
        idAmministratore:
          type: integer
          nullable: true

    # === OPERATORI ===
    OperatoreDTO:
      type: object
      properties:
        id:
          type: integer
          description: ID univoco dell'operatore
        nome:
          type: string
          description: Nome dell'operatore
        cognome:
          type: string
          description: Cognome dell'operatore
        email:
          type: string
          format: email
          description: Email dell'operatore
        codiceFiscale:
          type: string
          description: Codice fiscale dell'operatore
        disponibile:
          type: boolean
          description: Indica se l'operatore è attualmente disponibile
        patenti:
          type: array
          items:
            type: string
          description: Lista delle patenti possedute dall'operatore
          example: ["Patente B", "Patente C", "Patente Nautica"]
        abilita:
          type: array
          items:
            type: string
          description: Lista delle abilità specialistiche dell'operatore
          example: ["Soccorso Alpino", "Primo Soccorso Avanzato", "Rescue Diver"]
        missioniInCorso:
          type: integer
          nullable: true
          description: Numero di missioni attualmente in corso
        missioniCompletate:
          type: integer
          nullable: true
          description: Numero totale di missioni completate
      example:
        id: 5
        nome: "Mario"
        cognome: "Rossi"
        email: "mario.rossi@soccorso.it"
        codiceFiscale: "RSSMRA80A01H501Z"
        disponibile: true
        patenti: ["Patente B", "Patente C"]
        abilita: ["Soccorso Alpino", "Primo Soccorso Avanzato"]
        missioniInCorso: 0
        missioniCompletate: 23
        
    # === RICHIESTE DI SOCCORSO ===
    ListaRichiesteResponse:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/RichiestaDTO'
          description: Lista delle richieste nella pagina corrente
        totalElements:
          type: integer
          description: Numero totale di elementi
        totalPages:
          type: integer
          description: Numero totale di pagine
        number:
          type: integer
          description: Numero della pagina corrente (0-based)
        size:
          type: integer
          description: Dimensione della pagina
        first:
          type: boolean
          description: Indica se questa è la prima pagina
        last:
          type: boolean
          description: Indica se questa è l'ultima pagina
      example:
        content:
          - codice: 123
            stato: "Convalidata"
            descrizione: "Escursionista ferito sul Monte Bianco"
        totalElements: 150
        totalPages: 8
        number: 0
        size: 20
        first: true
        last: false

    DettagliRichiestaDTO:
      type: object
      properties:
        id:
          type: integer
          description: ID della richiesta
        stato:
          type: string
          enum: ["In Attesa", "Convalidata", "Attiva", "Chiusa", "Ignorata", "Annullata"]
          description: Stato corrente della richiesta
        descrizione:
          type: string
          description: Descrizione dell'emergenza
        indirizzo:
          type: string
          description: Indirizzo del luogo dell'emergenza
        nome:
          type: string
          description: Nome del luogo (opzionale)
        coordinate:
          type: string
          description: Coordinate GPS del luogo
        foto:
          type: string
          description: Foto dell'emergenza (Base64 encoded)
          nullable: true
        ip:
          type: string
          description: Indirizzo IP del segnalante
        emailSegnalante:
          type: string
          format: email
          description: Email del segnalante
        nomeSegnalante:
          type: string
          description: Nome del segnalante
        idAmministratore:
          type: integer
          nullable: true
          description: ID dell'amministratore che ha gestito la richiesta
        nomeAmministratore:
          type: string
          nullable: true
          description: Nome dell'amministratore
        missioneAssociata:
          $ref: '#/components/schemas/MissioneAssociataDTO'
          nullable: true
          description: Missione associata alla richiesta (se esistente)
      example:
        id: 123
        stato: "Attiva"
        descrizione: "Escursionista ferito sul Monte Bianco"
        indirizzo: "Monte Bianco, quota 2500m"
        coordinate: "45.8326,6.8652"
        emailSegnalante: "segnalante@email.com"
        nomeSegnalante: "Mario Rossi"

    MissioneAssociataDTO:
      type: object
      properties:
        id:
          type: integer
          description: ID della missione
        nome:
          type: string
          description: Nome della missione
        posizione:
          type: string
          description: Posizione dell'intervento
        obiettivo:
          type: string
          description: Obiettivo della missione
        stato:
          type: string
          enum: ["ATTIVA", "CONCLUSA"]
          description: Stato della missione
        dataOraInizio:
          type: string
          format: date-time
          description: Data e ora inizio missione
        dataOraFine:
          type: string
          format: date-time
          nullable: true
          description: Data e ora fine missione (se conclusa)
        livelloSuccesso:
          type: integer
          minimum: 0
          maximum: 5
          description: Livello di successo della missione (0 se non valutata)
        commento:
          type: string
          nullable: true
          description: Commento sulla missione
        numeroOperatori:
          type: integer
          description: Numero di operatori assegnati
      example:
        id: 123
        nome: "Soccorso alpino Monte Bianco"
        stato: "ATTIVA"
        dataOraInizio: "2024-01-15T14:30:00"
        numeroOperatori: 4

    AnnullaRichiestaResponse:
      type: object
      properties:
        success:
          type: boolean
          description: Indica se l'operazione è riuscita
        message:
          type: string
          description: Messaggio di stato
        richiesta:
          $ref: '#/components/schemas/RichiestaDTO'
          description: Dati della richiesta annullata
        statoOriginale:
          type: string
          description: Stato precedente all'annullamento
        adminId:
          type: integer
          description: ID dell'amministratore che ha annullato la richiesta
      example:
        success: true
        message: "Richiesta annullata con successo"
        richiesta:
          codice: 123
          stato: "Annullata"
        statoOriginale: "Convalidata"
        adminId: 1

    # === INSERIMENTO E CONVALIDA RICHIESTE ===
    RichiestaRequest:
      type: object
      required:
        - descrizione
        - indirizzo
        - emailSegnalante
        - nomeSegnalante
      properties:
        descrizione:
          type: string
          minLength: 10
          maxLength: 1000
          description: Descrizione dettagliata dell'emergenza
          example: "Escursionista caduto in un crepaccio sul Monte Bianco, necessario soccorso alpino urgente"
        indirizzo:
          type: string
          minLength: 5
          maxLength: 500
          description: Indirizzo o località dell'emergenza
          example: "Monte Bianco, sentiero CAI 201, quota 2500m"
        nome:
          type: string
          maxLength: 200
          description: Nome del luogo o punto di riferimento (opzionale)
          example: "Rifugio Torino"
        emailSegnalante:
          type: string
          format: email
          description: Email del segnalante per la convalida
          example: "mario.rossi@email.com"
        nomeSegnalante:
          type: string
          minLength: 2
          maxLength: 100
          description: Nome e cognome del segnalante
          example: "Mario Rossi"
        coordinate:
          type: string
          pattern: '^-?\d+\.\d+,-?\d+\.\d+$'
          description: Coordinate GPS in formato "latitudine,longitudine"
          example: "45.8326,6.8652"
        foto:
          type: string
          description: Foto dell'emergenza (Base64 encoded, opzionale)
          nullable: true

    RichiestaResponse:
      type: object
      properties:
        success:
          type: boolean
          description: Indica se l'operazione è riuscita
        message:
          type: string
          description: Messaggio di stato o errore
        richiesta:
          $ref: '#/components/schemas/RichiestaDTO'
          nullable: true
          description: Dati della richiesta creata (solo in caso di successo)
      example:
        success: true
        message: "Richiesta di soccorso inserita con successo. Email di convalida inviata."
        richiesta:
          codice: 123
          stato: "In Attesa"
          descrizione: "Escursionista ferito sul Monte Bianco"

    ConvalidaResponse:
      type: object
      properties:
        success:
          type: boolean
          description: Indica se la convalida è riuscita
        message:
          type: string
          description: Messaggio di stato
        richiesta:
          $ref: '#/components/schemas/RichiestaDTO'
          nullable: true
          description: Dati della richiesta convalidata
      example:
        success: true
        message: "Richiesta convalidata con successo. Gli amministratori sono stati notificati."
        richiesta:
          codice: 123
          stato: "Convalidata"
          descrizione: "Escursionista ferito sul Monte Bianco"

paths:
  # === AUTENTICAZIONE ===
  /auth/login:
    post:
      tags:
        - Autenticazione
      summary: Login utente
      description: |
        Effettua l'autenticazione di un amministratore o operatore nel sistema.
        Restituisce un token JWT da utilizzare per le richieste successive.
      security: [] # Endpoint pubblico
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login effettuato con successo
          headers:
            Authorization:
              description: Token JWT nel formato "Bearer <token>"
              schema:
                type: string
                example: "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '400':
          description: Dati di input non validi
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
              example:
                success: false
                message: "Email e password sono richiesti"
                token: null
                user: null
        '401':
          description: Credenziali non valide
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
              example:
                success: false
                message: "Credenziali non valide"
                token: null
                user: null
        '500':
          description: Errore interno del server
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'

  /auth/logout:
    delete:
      tags:
        - Autenticazione
      summary: Logout utente
      description: |
        Effettua il logout dell'utente corrente.
        Con JWT stateless, il token viene invalidato lato client.
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Logout effettuato con successo
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LogoutResponse'
        '401':
          description: Token non valido o mancante
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/verify:
    get:
      tags:
        - Autenticazione
      summary: Verifica validità token
      description: |
        Verifica se il token JWT fornito è valido e restituisce
        le informazioni dell'utente autenticato.
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Token valido
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VerifyResponse'
        '401':
          description: Token non valido o scaduto
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/test:
    get:
      tags:
        - Test
      summary: Test endpoint
      description: Endpoint di test per verificare che l'API REST funzioni correttamente
      security: [] # Endpoint pubblico
      responses:
        '200':
          description: API funzionante
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "REST API funziona!"
                  timestamp:
                    type: integer
                    format: int64
                    example: 1672531200000
                    
  # === MISSIONI ===
  /missioni:
    post:
      tags:
        - Missioni
      summary: Crea una nuova missione
      description: |
        Crea una nuova missione per una richiesta di soccorso in stato "Convalidata".
        La richiesta passerà automaticamente da "Convalidata" ad "Attiva".
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MissioneRequest'
      responses:
        '201':
          description: Missione creata con successo
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MissioneResponse'
        '400':
          description: Dati non validi o richiesta non in stato "Convalidata"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Solo gli amministratori possono creare missioni
        '401':
          description: Token non valido o mancante

  /missioni/richieste-attive:
    get:
      tags:
        - Missioni
      summary: Lista richieste disponibili per missioni
      description: Restituisce le richieste in stato "Convalidata" per cui è possibile creare missioni
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Lista richieste disponibili
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RichiestaDTO'
        '401':
          description: Token non valido o mancante

  /missioni/{id}:
    get:
      tags:
        - Missioni
      summary: Dettagli di una missione
      description: Restituisce i dettagli completi di una missione specifica
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: ID della missione
      responses:
        '200':
          description: Dettagli della missione
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DettagliMissioneDTO'
        '404':
          description: Missione non trovata
        '403':
          description: Solo gli amministratori possono vedere i dettagli
        '401':
          description: Token non valido o mancante

  /missioni/{id}/chiudi:
    put:
      tags:
        - Missioni
      summary: Chiude una missione in corso
      description: |
        Chiude una missione attiva con valutazione finale.
        La richiesta associata passerà da "Attiva" a "Chiusa".
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: ID della missione da chiudere
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChiusuraMissioneRequest'
      responses:
        '200':
          description: Missione chiusa con successo
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChiusuraMissioneResponse'
        '400':
          description: Dati non validi o missione non in stato attivo
        '404':
          description: Missione non trovata
        '403':
          description: Solo gli amministratori possono chiudere missioni
        '401':
          description: Token non valido o mancante

  /missioni/operatore/{idOperatore}:
    get:
      tags:
        - Missioni
      summary: Missioni di un operatore
      description: Lista delle missioni in cui un operatore è stato coinvolto
      security:
        - BearerAuth: []
      parameters:
        - name: idOperatore
          in: path
          required: true
          schema:
            type: integer
          description: ID dell'operatore
      responses:
        '200':
          description: Lista missioni dell'operatore
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MissioniOperatoreResponse'
        '404':
          description: Operatore non trovato
        '403':
          description: Solo gli amministratori possono vedere le missioni degli operatori
        '401':
          description: Token non valido o mancante

          # === OPERATORI ===
  /operatori/liberi:
    get:
      tags:
        - Operatori
      summary: Lista operatori attualmente liberi
      description: |
        Restituisce la lista degli operatori attualmente disponibili 
        (non impegnati in missioni attive). Include patenti e abilità.
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Lista operatori disponibili
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OperatoreDTO'
        '401':
          description: Token non valido o mancante
        '500':
          description: Errore interno del server
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /operatori:
    get:
      tags:
        - Operatori
      summary: Lista operatori con filtri opzionali
      description: |
        Restituisce la lista di operatori con informazioni opzionali su stato e missioni.
        Se includeStato=false, restituisce solo operatori liberi.
      security:
        - BearerAuth: []
      parameters:
        - name: includeStato
          in: query
          required: false
          schema:
            type: boolean
            default: false
          description: |
            Se true, include informazioni dettagliate su disponibilità e missioni.
            Se false, restituisce solo operatori attualmente liberi.
      responses:
        '200':
          description: Lista operatori
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OperatoreDTO'
        '401':
          description: Token non valido o mancante
        '500':
          description: Errore interno del server

  /operatori/{id}:
    get:
      tags:
        - Operatori
      summary: Dettagli di un operatore specifico
      description: |
        Restituisce i dettagli completi di un operatore, inclusi patenti, 
        abilità, stato di disponibilità e statistiche missioni.
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: ID dell'operatore
      responses:
        '200':
          description: Dettagli dell'operatore
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperatoreDTO'
        '400':
          description: ID operatore non valido
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Operatore non trovato
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Token non valido o mancante
        '500':
          description: Errore interno del server
          
  # === RICHIESTE DI SOCCORSO ===
  /richieste:
    get:
      tags:
        - Richieste
      summary: Lista paginata delle richieste di soccorso
      description: |
        Restituisce una lista paginata delle richieste di soccorso, 
        filtrata opzionalmente per stato.
      security:
        - BearerAuth: []
      parameters:
        - name: stato
          in: query
          required: false
          schema:
            type: string
            enum: ["ATTIVA", "IN_CORSO", "CHIUSA", "IGNORATA"]
          description: Filtra per stato delle richieste
          example: "ATTIVA"
        - name: page
          in: query
          required: false
          schema:
            type: integer
            minimum: 1
            default: 1
          description: Numero di pagina (1-based)
        - name: size
          in: query
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
          description: Numero di elementi per pagina
      responses:
        '200':
          description: Lista paginata delle richieste
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListaRichiesteResponse'
        '400':
          description: Parametri di paginazione non validi
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Token non valido o mancante
        '500':
          description: Errore interno del server
    post:
      tags:
        - Richieste Pubbliche
      summary: Inserisce una nuova richiesta di soccorso
      description: |
        Endpoint pubblico per l'inserimento di nuove richieste di soccorso.
        Non richiede autenticazione per permettere segnalazioni rapide in emergenza.
        Invia automaticamente un'email di convalida al segnalante.
      security: [] # Endpoint pubblico
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RichiestaRequest'
      responses:
        '201':
          description: Richiesta creata con successo
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RichiestaResponse'
        '400':
          description: Dati non validi
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RichiestaResponse'
              examples:
                dati_mancanti:
                  summary: Dati richiesta mancanti
                  value:
                    success: false
                    message: "Dati richiesta mancanti"
                    richiesta: null
                validazione_fallita:
                  summary: Errore di validazione
                  value:
                    success: false
                    message: "Email segnalante non valida"
                    richiesta: null
        '500':
          description: Errore interno del server
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RichiestaResponse'


  /richieste/non-positive:
    get:
      tags:
        - Richieste
      summary: Richieste con risultato non totalmente positivo
      description: |
        Lista delle richieste di soccorso chiuse con livello di successo 
        minore di 5 (risultato non totalmente positivo).
      security:
        - BearerAuth: []
      parameters:
        - name: page
          in: query
          required: false
          schema:
            type: integer
            minimum: 1
            default: 1
          description: Numero di pagina (1-based)
        - name: size
          in: query
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
          description: Numero di elementi per pagina
      responses:
        '200':
          description: Lista paginata delle richieste non positive
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListaRichiesteResponse'
        '400':
          description: Parametri di paginazione non validi
        '401':
          description: Token non valido o mancante
        '500':
          description: Errore interno del server

  /richieste/{id}:
    get:
      tags:
        - Richieste
      summary: Dettagli di una richiesta di soccorso
      description: |
        Restituisce i dettagli completi di una richiesta di soccorso, 
        inclusa la missione associata se esistente.
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: ID della richiesta
      responses:
        '200':
          description: Dettagli della richiesta
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DettagliRichiestaDTO'
        '400':
          description: ID richiesta non valido
        '404':
          description: Richiesta non trovata
        '403':
          description: Solo gli amministratori possono vedere i dettagli
        '401':
          description: Token non valido o mancante

  /richieste/{id}/annulla:
    put:
      tags:
        - Richieste
      summary: Annulla una richiesta di soccorso
      description: |
        Annulla una richiesta di soccorso in stato "Convalidata".
        Solo gli amministratori possono annullare richieste.
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: ID della richiesta da annullare
      responses:
        '200':
          description: Richiesta annullata con successo
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnnullaRichiestaResponse'
        '400':
          description: |
            Richiesta non può essere annullata (stato non valido) o 
            ID non valido
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                stato_non_valido:
                  summary: Stato non valido per annullamento
                  value:
                    error: "La richiesta selezionata deve avere lo stato \"Convalidata\". Stato attuale: Chiusa"
                    code: "INVALID_STATE_FOR_CANCELLATION"
                già_annullata:
                  summary: Richiesta già annullata
                  value:
                    error: "La richiesta è già stata annullata"
                    code: "ALREADY_CANCELLED"
        '404':
          description: Richiesta non trovata
        '403':
          description: Solo gli amministratori possono annullare richieste
        '401':
          description: Token non valido o mancante
          
  # === INSERIMENTO E CONVALIDA RICHIESTE (PUBBLICI) ===
  /richieste/{id}/convalida:
    post:
      tags:
        - Richieste Pubbliche
      summary: Convalida una richiesta di soccorso
      description: |
        Endpoint pubblico per convalidare richieste tramite token ricevuto via email.
        Una volta convalidata, la richiesta diventa visibile agli amministratori.
      security: [] # Endpoint pubblico
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: ID della richiesta da convalidare
        - name: token
          in: query
          required: true
          schema:
            type: string
          description: Token di convalida ricevuto via email
          example: "abc123def456ghi789"
      responses:
        '200':
          description: Richiesta convalidata con successo
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConvalidaResponse'
              examples:
                convalida_riuscita:
                  summary: Prima convalida
                  value:
                    success: true
                    message: "Richiesta convalidata con successo. Gli amministratori sono stati notificati."
                    richiesta:
                      codice: 123
                      stato: "Convalidata"
                già_convalidata:
                  summary: Già convalidata
                  value:
                    success: true
                    message: "La richiesta era già stata convalidata in precedenza."
                    richiesta:
                      codice: 123
                      stato: "Convalidata"
        '400':
          description: Token non valido o richiesta in stato non convalidabile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConvalidaResponse'
              examples:
                token_mancante:
                  summary: Token mancante
                  value:
                    success: false
                    message: "Token di convalida mancante"
                    richiesta: null
                token_invalido:
                  summary: Token non valido
                  value:
                    success: false
                    message: "Token di convalida non valido o scaduto"
                    richiesta: null
                stato_invalido:
                  summary: Stato non convalidabile
                  value:
                    success: false
                    message: "La richiesta non può essere convalidata nel suo stato attuale"
                    richiesta: null
        '404':
          description: Richiesta non trovata
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConvalidaResponse'
              example:
                success: false
                message: "Richiesta non trovata"
                richiesta: null
        '500':
          description: Errore interno del server
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConvalidaResponse'

